@page
@model RazorPizzeria.Pages.OrdersModel
@{
    var totalPages = (int)Math.Ceiling((double)Model.PizzaOrders.Count / 12);
    var pageNumber = Request.Query.ContainsKey("pageNumber") ? int.Parse(Request.Query["pageNumber"]) : 1;
    pageNumber = Math.Max(1, Math.Min(pageNumber, totalPages));
}

<div>
    <div class="w-100 mt-4 row makeYourOwnDiv listImage">
        <div class="col-8 align-items-start">
            <div class="align-middle makeYourOwnText">
                <h3 style="text-align: left;">Public DB data</h3>
                <p style="text-align: left;">Here are all the orders</p>
            </div>
        </div>
        <div class="col-4 d-flex align-items-center justify-content-end">
            <img class="" src="~/images/Pizzas/server.png" style="max-width: 100%;" alt="Pizza Oven">
        </div>
    </div>

    <table class="table mt-4 table-striped tbl-container bdr">
        <thead class="table-dark">
            <tr>
                <th>
                    Id
                </th>
                <th>
                    Pizza Name
                </th>
                <th>
                    Price
                </th>
            </tr>
        </thead>
        <tbody>
            @{
                var startIndex = (pageNumber - 1) * 12;
                var currentPageOrders = Model.PizzaOrders.Skip(startIndex).Take(12);
            }

            @foreach (var order in currentPageOrders)
            {
                <tr>
                    <td>
                        @order.Id
                    </td>

                    <td>
                        @order.PizzaName
                    </td>

                    <td>
                        @order.BasePrice.0 UAH
                    </td>
                </tr>
            }

        </tbody>
        <tfoot class="table-dark rounded">
            <tr>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </tfoot>
    </table>

</div>

<nav class="fixed-pagination" aria-label="Page navigation">
    <ul class="pagination justify-content-center mt-3">
        @{
            var previousPage = Math.Max(1, pageNumber - 1);
            var nextPage = Math.Min(totalPages, pageNumber + 1);
        }

        <li class="page-item @(pageNumber == 1 ? "disabled" : "")">
            <a class="page-link" href="/Orders?pageNumber=@previousPage">Previous</a>
        </li>

        @{
            for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(pageNumber == i ? "active" : "")">
                    <a class="page-link" href="/Orders?pageNumber=@i">@i</a>
                </li>
            }
        }

        <li class="page-item @(pageNumber == totalPages ? "disabled" : "")">
            <a class="page-link" href="/Orders?pageNumber=@nextPage">Next</a>
        </li>
    </ul>
</nav>

<style>
    .fixed-pagination {
        position: fixed;
        bottom: 65px;
        left: 50%;
        transform: translateX(-50%);
    }

    .bdr {
        border-radius: 6px;
        overflow: hidden;
    }
</style>
